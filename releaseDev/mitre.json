{
    "name": "MITRE",
    "description": "Testing MITRE for Kubernetes as suggested by microsoft in https://www.microsoft.com/security/blog/wp-content/uploads/2020/04/k8s-matrix.png",
    "attributes": {
        "armoBuiltin": true
    },
    "version": null,
    "controls": [
        {
            "name": "Access container service account",
            "attributes": {
                "armoBuiltin": true,
                "microsoftMitreColumns": [
                    "Credential access"
                ],
                "rbacQuery": "Container service account mapping",
                "controlTypeTags": [
                    "compliance",
                    "security-impact"
                ],
                "attackTracks": [
                    {
                        "attackTrack": "container",
                        "categories": [
                            "Credential access",
                            "Impact - K8s API access"
                        ]
                    }
                ]
            },
            "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All PODs with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
            "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary PODs have SA token mounted into them.",
            "id": "C-0053",
            "long_description": "Service account (SA) represents an application identity in Kubernetes. By default, an SA is mounted to every created pod in the cluster. Using the SA, containers in the pod can send requests to the Kubernetes API server. Attackers who get access to a pod can access the SA token (located in /var/run/secrets/kubernetes.io/serviceaccount/token) and perform actions in the cluster, according to the SA permissions. If RBAC is not enabled, the SA has unlimited permissions in the cluster. If RBAC is enabled, its permissions are determined by the RoleBindings\\\\ClusterRoleBindings that are associated with it.",
            "test": "Check if RBAC is enabled. If is not, the sa has unlimited permissions.If RBAC enabled, list which workloads have bound service accounts and all the sas permissionsScore-",
            "controlID": "C-0053",
            "baseScore": 6.0,
            "rules": []
        },
        {
            "name": "Access Kubernetes dashboard",
            "attributes": {
                "armoBuiltin": true,
                "microsoftMitreColumns": [
                    "Discovery",
                    "Lateral Movement"
                ],
                "rbacQuery": "Access k8s Dashboard",
                "controlTypeTags": [
                    "compliance"
                ]
            },
            "description": "Attackers who gain access to the dashboard service account or have its RBAC permissions can use its network access to retrieve information about resources in the cluster or change them. This control checks if a subject that is not dashboard service account is bound to dashboard role/clusterrole, or - if anyone that is not the dashboard pod is associated with dashboard service account.",
            "remediation": "Make sure that the \u201cKubernetes Dashboard\u201d service account is only bound to the Kubernetes dashboard following the least privilege principle.",
            "id": "C-0014",
            "long_description": "The Kubernetes dashboard is a web-based UI that is used for monitoring and managing the Kubernetes cluster. The dashboard allows users to perform actions in the cluster using its service account (Kubernetes-dashboard) with the permissions that are determined by the binding or cluster-binding for this service account. Attackers who gain access to a container in the cluster, can use its network access to the dashboard pod. Consequently, attackers may retrieve information about the various resources in the cluster using the dashboard\u2019s identity.",
            "test": "Check who is associated with the dashboard service account or bound to dashboard role/clusterrole.",
            "controlID": "C-0014",
            "baseScore": 2.0,
            "rules": []
        },
        {
            "name": "Applications credentials in configuration files",
            "attributes": {
                "armoBuiltin": true,
                "microsoftMitreColumns": [
                    "Credential access",
                    "Lateral Movement"
                ],
                "controlTypeTags": [
                    "security",
                    "compliance",
                    "security-impact"
                ],
                "attackTracks": [
                    {
                        "attackTrack": "kubeapi",
                        "categories": [
                            "Credential access"
                        ]
                    },
                    {
                        "attackTrack": "container",
                        "categories": [
                            "Credential access"
                        ]
                    }
                ]
            },
            "description": "Attackers who have access to configuration files can steal the stored secrets and use them. This control checks if ConfigMaps or pod specifications have sensitive information in their configuration.",
            "remediation": "Use Kubernetes secrets or Key Management Systems to store credentials.",
            "id": "C-0012",
            "long_description": "Developers store secrets in the Kubernetes configuration files, such as environment variables in the pod configuration. Such behavior is commonly seen in clusters that are monitored by Azure Security Center. Attackers who have access to those configurations, by querying the API server or by accessing those files on the developer\u2019s endpoint, can steal the stored secrets and use them.",
            "test": "Check if the pod has sensitive information in environment variables, by using list of known sensitive key names. Check if there are configmaps with sensitive information.",
            "controlID": "C-0012",
            "baseScore": 8.0,
            "rules": []
        },
        {
            "name": "Cluster-admin binding",
            "attributes": {
                "armoBuiltin": true,
                "microsoftMitreColumns": [
                    "Privilege escalation"
                ],
                "rbacQuery": "Show cluster_admin",
                "controlTypeTags": [
                    "security",
                    "compliance"
                ],
                "attackTracks": [
                    {
                        "attackTrack": "kubeapi",
                        "categories": [
                            "Impact - data destruction",
                            "Impact - service injection"
                        ]
                    }
                ]
            },
            "description": "Attackers who have cluster admin permissions (can perform any action on any resource), can take advantage of their privileges for malicious activities. This control determines which subjects have cluster admin permissions.",
            "remediation": "You should apply least privilege principle. Make sure cluster admin permissions are granted only when it is absolutely necessary. Don't use subjects with such high permissions for daily operations.",
            "id": "C-0035",
            "long_description": "Role-based access control (RBAC) is a key security feature in Kubernetes. RBAC can restrict the allowed actions of the various identities in the cluster. Cluster-admin is a built-in high privileged role in Kubernetes. Attackers who have permissions to create bindings and cluster-bindings in the cluster can create a binding to the cluster-admin ClusterRole or to other high privileges roles.",
            "test": "Check which subjects have cluster-admin RBAC permissions \u2013 either by being bound to the cluster-admin clusterrole, or by having equivalent high privileges.  ",
            "controlID": "C-0035",
            "baseScore": 6.0,
            "rules": []
        },
        {
            "name": "Cluster internal networking",
            "attributes": {
                "armoBuiltin": true,
                "microsoftMitreColumns": [
                    "Lateral movement"
                ],
                "controlTypeTags": [
                    "security",
                    "compliance"
                ],
                "attackTracks": [
                    {
                        "attackTrack": "container",
                        "categories": [
                            "Discovery",
                            "Lateral movement"
                        ]
                    }
                ]
            },
            "description": "If no network policy is defined, attackers who gain access to a container may use it to move laterally in the cluster. This control lists namespaces in which no network policy is defined.",
            "remediation": "Define Kubernetes network policies or use alternative products to protect cluster network.",
            "id": "C-0054",
            "long_description": "Kubernetes networking behavior allows traffic between pods in the cluster as a default behavior. Attackers who gain access to a single container may use it for network reachability to another container in the cluster.",
            "test": "Check for each namespace if there is a network policy defined.",
            "controlID": "C-0054",
            "baseScore": 4.0,
            "rules": []
        },
        {
            "name": "Exec into container",
            "attributes": {
                "armoBuiltin": true,
                "microsoftMitreColumns": [
                    "Execution"
                ],
                "rbacQuery": "Show who can access into pods",
                "controlTypeTags": [
                    "compliance",
                    "security-impact"
                ]
            },
            "description": "Attackers with relevant permissions can run malicious commands in the context of legitimate containers in the cluster using \u201ckubectl exec\u201d command. This control determines which subjects have permissions to use this command.",
            "remediation": "It is recommended to prohibit \u201ckubectl exec\u201d command in production environments. It is also recommended not to use subjects with this permission for daily cluster operations.",
            "id": "C-0002",
            "long_description": "Attackers who have permissions, can run malicious commands in containers in the cluster using exec command (\u201ckubectl exec\u201d). In this method, attackers can use legitimate images, such as an OS image (e.g., Ubuntu) as a backdoor container, and run their malicious code remotely by using \u201ckubectl exec\u201d.",
            "test": "Check which subjects have RBAC permissions to exec into pods\u2013 if they have the \u201cpods/exec\u201d verb.",
            "controlID": "C-0002",
            "baseScore": 5.0,
            "example": "@controls/examples/c002.yaml",
            "rules": []
        },
        {
            "name": "Exposed sensitive interfaces",
            "attributes": {
                "armoBuiltin": true,
                "microsoftMitreColumns": [
                    "Initial access"
                ],
                "controlTypeTags": [
                    "compliance"
                ]
            },
            "description": "Exposing a sensitive interface to the internet poses a security risk. It might enable attackers to run malicious code or deploy containers in the cluster. This control checks if known components (e.g. Kubeflow, Argo Workflows, etc.) are deployed and exposed services externally.",
            "remediation": "Consider blocking external interfaces or protect them with appropriate security tools.",
            "id": "C-0021",
            "long_description": "Exposing a sensitive interface to the internet poses a security risk. Some popular frameworks were not intended to be exposed to the internet, and therefore don\u2019t require authentication by default. Thus, exposing them to the internet allows unauthenticated access to a sensitive interface which might enable running code or deploying containers in the cluster by a malicious actor. Examples of such interfaces that were seen exploited include Apache NiFi, Kubeflow, Argo Workflows, Weave Scope, and the Kubernetes dashboard.",
            "test": "Checking if a service of type nodeport/loadbalancer to one of the known exploited interfaces (Apache NiFi, Kubeflow, Argo Workflows, Weave Scope Kubernetes dashboard) exists. Needs to add user config",
            "controlID": "C-0021",
            "baseScore": 6.0,
            "rules": []
        },
        {
            "name": "HostPath mount",
            "attributes": {
                "armoBuiltin": true,
                "microsoftMitreColumns": [
                    "Privilege escalation"
                ],
                "controlTypeTags": [
                    "security",
                    "compliance"
                ],
                "attackTracks": [
                    {
                        "attackTrack": "container",
                        "categories": [
                            "Impact - Data access in container"
                        ]
                    }
                ]
            },
            "description": "Mounting host directory to the container can be used by attackers to get access to the underlying host. This control identifies all the PODs using hostPath mount.",
            "example": "apiVersion: v1\nkind: Pod\nmetadata:\n  name: test-pd\nspec:\n  containers:\n  - image: k8s.gcr.io/test-webserver\n    name: test-container\n    volumeMounts:\n    - mountPath: /test-pd\n      name: test-volume\n  volumes:\n  - name: test-volume\n    hostPath: # This field triggers failure!\n      path: /data\n      type: Directory\n",
            "remediation": "Remove hostPath mounts unless they are absolutely necessary and use exception mechanism to remove notifications.",
            "id": "C-0048",
            "controlID": "C-0048",
            "baseScore": 7.0,
            "rules": []
        },
        {
            "name": "Instance Metadata API",
            "attributes": {
                "armoBuiltin": true,
                "microsoftMitreColumns": [
                    "Discovery"
                ],
                "controlTypeTags": [
                    "security",
                    "compliance"
                ],
                "attackTracks": [
                    {
                        "attackTrack": "container",
                        "categories": [
                            "Credential access",
                            "Discovery",
                            "Impact - service access"
                        ]
                    }
                ]
            },
            "description": "Attackers who gain access to a container, may query the metadata API service for getting information about the underlying node. This control checks if there is access from the nodes to cloud providers instance metadata services.",
            "remediation": "Disable metadata services for pods in cloud provider settings.",
            "id": "C-0052",
            "long_description": "Cloud providers provide instance metadata service for retrieving information about the virtual machine, such as network configuration, disks, and SSH public keys. This service is accessible to the VMs via a non-routable IP address that can be accessed from within the VM only. Attackers who gain access to a container, may query the metadata API service for getting information about the underlying node. For example, in Azure, the following request would retrieve all the metadata information of an instance: http:///metadata/instance?api-version=2019-06-01\\n\\n",
            "test": "Check which nodes have access to instance metadata services. The check is for AWS, GCP and Azure.",
            "controlID": "C-0052",
            "baseScore": 7.0,
            "rules": []
        },
        {
            "name": "Kubernetes CronJob",
            "attributes": {
                "armoBuiltin": true,
                "microsoftMitreColumns": [
                    "Persistence"
                ],
                "controlTypeTags": [
                    "compliance"
                ]
            },
            "description": "Attackers may use Kubernetes CronJob for scheduling execution of malicious code that would run as a POD in the cluster. This control lists all the CronJobs that exist in the cluster for the user to approve.",
            "remediation": "Watch Kubernetes CronJobs and make sure they are legitimate.",
            "id": "C-0026",
            "long_description": "Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate. Kubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs. Attackers may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster.",
            "test": "We list all CronJobs that exist in cluster for the user to approve.",
            "controlID": "C-0026",
            "baseScore": 1.0,
            "rules": []
        },
        {
            "name": "List Kubernetes secrets",
            "attributes": {
                "armoBuiltin": true,
                "microsoftMitreColumns": [
                    "Credential access"
                ],
                "rbacQuery": "Show who can access secrets",
                "controlTypeTags": [
                    "security-impact",
                    "compliance"
                ],
                "attackTracks": [
                    {
                        "attackTrack": "kubeapi",
                        "categories": [
                            "Credential access"
                        ]
                    }
                ]
            },
            "description": "Attackers who have permissions to access secrets can access sensitive information that might include credentials to various services. This control determines which user, group or service account can list/get secrets.",
            "remediation": "Monitor and approve list of users, groups and service accounts that can access secrets. Use exception mechanism to prevent repetitive the notifications.",
            "id": "C-0015",
            "long_description": "A Kubernetes secret is an object that lets users store and manage sensitive information, such as passwords and connection strings in the cluster. Secrets can be consumed by reference in the pod configuration. Attackers who have permissions to retrieve the secrets from the API server (by using the pod service account, for example) can access sensitive information that might include credentials to various services.",
            "test": "Alerting on users  which have get/list/watch RBAC permissions on secrets. ",
            "controlID": "C-0015",
            "baseScore": 7.0,
            "example": "@controls/examples/c015.yaml",
            "rules": []
        },
        {
            "name": "Mount service principal",
            "attributes": {
                "armoBuiltin": true,
                "microsoftMitreColumns": [
                    "Credential Access"
                ],
                "controlTypeTags": [
                    "compliance"
                ]
            },
            "description": "When a cluster is deployed in the cloud, in some cases attackers can leverage their access to a container in the cluster to gain cloud credentials. This control determines if any workload contains a volume with potential access to cloud credential.",
            "example": "apiVersion: v1\nkind: Pod\nmetadata:\n  name: test-pd\nspec:\n  containers:\n  - image: k8s.gcr.io/test-webserver\n    name: test-container\n    volumeMounts:\n    - mountPath: /test-pd\n      name: test-volume\n  volumes:\n  - name: test-volume\n    hostPath: # This field triggers failure!\n      path: /data\n      type: Directory\n",
            "remediation": "Refrain from using path mount to known cloud credentials folders or files .",
            "id": "C-0020",
            "long_description": "When the cluster is deployed in the cloud, in some cases attackers can leverage their access to a container in the cluster to gain cloud credentials. For example, in AKS each node contains service principal credential.",
            "test": "Check which workloads have volumes with potential access to known cloud credentials folders or files in node, like \u201c/etc/kubernetes/azure.json\u201d for Azure.",
            "controlID": "C-0020",
            "baseScore": 4.0,
            "rules": []
        },
        {
            "name": "Privileged container",
            "attributes": {
                "armoBuiltin": true,
                "microsoftMitreColumns": [
                    "Privilege escalation"
                ],
                "controlTypeTags": [
                    "security"
                ],
                "attackTracks": [
                    {
                        "attackTrack": "container",
                        "categories": [
                            "Privilege escalation"
                        ]
                    }
                ]
            },
            "description": "Potential attackers may gain access to privileged containers and inherit access to the host resources. Therefore, it is not recommended to deploy privileged containers unless it is absolutely necessary. This control identifies all the privileged Pods.",
            "example": "apiVersion: v1\nkind: Pod\nmetadata:\n  name: privileged\nspec:\n  containers:\n    - name: pause\n      image: k8s.gcr.io/pause\n      securityContext:\n          privileged: true # This field triggers failure!\n",
            "remediation": "Remove privileged capabilities by setting the securityContext.privileged to false. If you must deploy a Pod as privileged, add other restriction to it, such as network policy, Seccomp etc and still remove all unnecessary capabilities. Use the exception mechanism to remove unnecessary notifications.",
            "id": "C-0057",
            "long_description": "A privileged container is a container that has all the capabilities of the host machine, which lifts all the limitations regular containers have. Practically, this means that privileged containers can do almost every action that can be performed directly on the host. Attackers who gain access to a privileged container or have permissions to create a new privileged container (by using the compromised pod\u2019s service account, for example), can get access to the host\u2019s resources.",
            "test": "Check in POD spec if securityContext.privileged == true, if so raise an alert.",
            "controlID": "C-0057",
            "baseScore": 8.0,
            "rules": []
        },
        {
            "name": "SSH server running inside container",
            "attributes": {
                "armoBuiltin": true,
                "microsoftMitreColumns": [
                    "Execution"
                ],
                "controlTypeTags": [
                    "compliance"
                ]
            },
            "description": "An SSH server that is running inside a container may be used by attackers to get remote access to the container. This control checks if pods have an open SSH port (22/2222).",
            "remediation": "Remove SSH from the container image or limit the access to the SSH server using network policies.",
            "id": "C-0042",
            "long_description": "SSH server that is running inside a container may be used by attackers. If attackers gain valid credentials to a container, whether by brute force attempts or by other methods (such as phishing), they can use it to get remote access to the container by SSH.",
            "test": "Check if service connected to some workload has an SSH port (22/2222). If so we raise an alert. ",
            "controlID": "C-0042",
            "baseScore": 3.0,
            "rules": []
        },
        {
            "name": "Writable hostPath mount",
            "attributes": {
                "armoBuiltin": true,
                "microsoftMitreColumns": [
                    "Persistence",
                    "Lateral Movement"
                ],
                "controlTypeTags": [
                    "security",
                    "compliance",
                    "devops",
                    "security-impact"
                ],
                "attackTracks": [
                    {
                        "attackTrack": "container",
                        "categories": [
                            "Persistence",
                            "Impact - Data access in container"
                        ]
                    }
                ]
            },
            "description": "Mounting host directory to the container can be used by attackers to get access to the underlying host and gain persistence.",
            "remediation": "Refrain from using the hostPath mount or use the exception mechanism to remove unnecessary notifications.",
            "id": "C-0045",
            "long_description": "hostPath volume mounts a directory or a file from the host to the container. Attackers who have permissions to create a new container in the cluster may create one with a writable hostPath volume and gain persistence on the underlying host. For example, the latter can be achieved by creating a cron job on the host.",
            "test": "Checking in POD spec if there is a hostPath volume, if it has the section mount.readOnly == false (or doesn\u2019t exist) we raise an alert.",
            "controlID": "C-0045",
            "baseScore": 8.0,
            "example": "@controls/examples/c045.yaml",
            "rules": []
        },
        {
            "name": "Malicious admission controller (mutating)",
            "attributes": {
                "armoBuiltin": true,
                "microsoftMitreColumns": [
                    "Persistence"
                ],
                "controlTypeTags": [
                    "security",
                    "compliance"
                ],
                "attackTracks": [
                    {
                        "attackTrack": "kubeapi",
                        "categories": [
                            "Impact - service injection"
                        ]
                    }
                ]
            },
            "description": "Attackers may use mutating webhooks to intercept and modify all the resources in the cluster. This control lists all mutating webhook configurations that must be verified.",
            "remediation": "Ensure all the webhooks are necessary. Use exception mechanism to prevent repititive notifications.",
            "id": "C-0039",
            "controlID": "C-0039",
            "baseScore": 4.0,
            "rules": []
        },
        {
            "name": "Malicious admission controller (validating)",
            "attributes": {
                "armoBuiltin": true,
                "microsoftMitreColumns": [
                    "Credential access"
                ],
                "controlTypeTags": [
                    "security",
                    "compliance"
                ],
                "attackTracks": [
                    {
                        "attackTrack": "kubeapi",
                        "categories": [
                            "Impact - data destruction",
                            "Impact - service injection"
                        ]
                    }
                ]
            },
            "description": "Attackers can use validating webhooks to intercept and discover all the resources in the cluster. This control lists all the validating webhook configurations that must be verified.",
            "remediation": "Ensure all the webhooks are necessary. Use exception mechanism to prevent repititive notifications.",
            "id": "C-0036",
            "controlID": "C-0036",
            "baseScore": 3.0,
            "rules": []
        },
        {
            "name": "Delete Kubernetes events",
            "attributes": {
                "armoBuiltin": true,
                "microsoftMitreColumns": [
                    "Defense evasion"
                ],
                "rbacQuery": "Show who can delete k8s events",
                "controlTypeTags": [
                    "security",
                    "compliance"
                ],
                "attackTracks": [
                    {
                        "attackTrack": "kubeapi",
                        "categories": [
                            "Defense evasion"
                        ]
                    }
                ]
            },
            "description": "Attackers may delete Kubernetes events to avoid detection of their activity in the cluster. This control identifies all the subjects that can delete Kubernetes events.",
            "remediation": "You should follow the least privilege principle. Minimize the number of subjects who can delete Kubernetes events. Avoid using these subjects in the daily operations.",
            "id": "C-0031",
            "long_description": "A Kubernetes event is a Kubernetes object that logs state changes and failures of the resources in the cluster. Example events are a container creation, an image pull, or a pod scheduling on a node. Kubernetes events can be very useful for identifying changes that occur in the cluster. Therefore, attackers may want to delete these events (e.g., by using: \u201ckubectl delete events\u2013all\u201d) in an attempt to avoid detection of their activity in the cluster.",
            "test": "List who has delete/deletecollection RBAC permissions on events.",
            "controlID": "C-0031",
            "baseScore": 4.0,
            "example": "@controls/examples/c031.yaml",
            "rules": []
        },
        {
            "name": "CoreDNS poisoning",
            "attributes": {
                "armoBuiltin": true,
                "microsoftMitreColumns": [
                    "Lateral Movement"
                ],
                "controlTypeTags": [
                    "compliance"
                ],
                "attackTracks": [
                    {
                        "attackTrack": "kubeapi",
                        "categories": [
                            "Impact - service injection"
                        ]
                    }
                ]
            },
            "description": "If attackers have permissions to modify the coredns ConfigMap they can change the behavior of the cluster\u2019s DNS, poison it, and override the network identity of other services. This control identifies all subjects allowed to update the 'coredns' configmap.",
            "remediation": "You should follow the least privilege principle. Monitor and approve all the subjects allowed to modify the 'coredns' configmap. It is also recommended to remove this permission from the users/service accounts used in the daily operations.",
            "id": "C-0037",
            "long_description": "CoreDNS is a modular Domain Name System (DNS) server written in Go, hosted by Cloud Native Computing Foundation (CNCF). CoreDNS is the main DNS service that is being used in Kubernetes. The configuration of CoreDNS can be modified by a file named corefile. In Kubernetes, this file is stored in a ConfigMap object, located at the kube-system namespace. If attackers have permissions to modify the ConfigMap, for example by using the container\u2019s service account, they can change the behavior of the cluster\u2019s DNS, poison it, and take the network identity of other services.",
            "test": "Check who has update/patch RBAC permissions on \u2018coredns\u2019 configmaps, or to all configmaps.",
            "controlID": "C-0037",
            "baseScore": 4.0,
            "rules": []
        },
        {
            "name": "Data Destruction",
            "attributes": {
                "armoBuiltin": true,
                "microsoftMitreColumns": [
                    "Impact"
                ],
                "rbacQuery": "Data destruction",
                "controlTypeTags": [
                    "compliance"
                ]
            },
            "description": "Attackers may attempt to destroy data and resources in the cluster. This includes deleting deployments, configurations, storage, and compute resources. This control identifies all subjects that can delete resources.",
            "remediation": "You should follow the least privilege principle and minimize the number of subjects that can delete resources.",
            "id": "C-0007",
            "long_description": "Attackers may attempt to destroy data and resources in the cluster. This includes deleting deployments, configurations, storage, and compute resources.",
            "test": "Check which subjects have delete/deletecollection RBAC permissions on workloads.",
            "controlID": "C-0007",
            "baseScore": 5.0,
            "example": "@controls/examples/c007.yaml",
            "rules": []
        },
        {
            "name": "CVE-2021-25741 - Using symlink for arbitrary host file system access.",
            "attributes": {
                "armoBuiltin": true,
                "controlTypeTags": [
                    "security",
                    "compliance"
                ],
                "attackTracks": [
                    {
                        "attackTrack": "container",
                        "categories": [
                            "Persistence",
                            "Impact - Data access in container"
                        ]
                    }
                ]
            },
            "description": "A user may be able to create a container with subPath or subPathExpr volume mounts to access files & directories anywhere on the host filesystem. Following Kubernetes versions are affected: v1.22.0 - v1.22.1, v1.21.0 - v1.21.4, v1.20.0 - v1.20.10, version v1.19.14 and lower. This control checks the vulnerable versions and the actual usage of the subPath feature in all Pods in the cluster. If you want to learn more about the CVE, please refer to the CVE link: https://nvd.nist.gov/vuln/detail/CVE-2021-25741",
            "remediation": "To mitigate this vulnerability without upgrading kubelet, you can disable the VolumeSubpath feature gate on kubelet and kube-apiserver, or remove any existing Pods using subPath or subPathExpr feature.",
            "id": "C-0058",
            "controlID": "C-0058",
            "baseScore": 6.0,
            "rules": []
        },
        {
            "name": "CVE-2021-25742-nginx-ingress-snippet-annotation-vulnerability",
            "attributes": {
                "armoBuiltin": true,
                "controlTypeTags": [
                    "security",
                    "compliance"
                ],
                "attackTracks": [
                    {
                        "attackTrack": "container",
                        "categories": [
                            "Initial access",
                            "Execution"
                        ]
                    }
                ]
            },
            "description": "Security issue in ingress-nginx where a user that can create or update ingress objects can use the custom snippets feature to obtain all secrets in the cluster (see more at https://github.com/kubernetes/ingress-nginx/issues/7837)",
            "remediation": "To mitigate this vulnerability: 1. Upgrade to a version that allows mitigation (>= v0.49.1 or >= v1.0.1), 2. Set allow-snippet-annotations to false in your ingress-nginx ConfigMap based on how you deploy ingress-nginx",
            "test": "The control checks if the nginx-ingress-controller contains the ability to disable allowSnippetAnnotations and that indeed this feature is turned off",
            "id": "C-0059",
            "controlID": "C-0059",
            "baseScore": 8.0,
            "rules": []
        },
        {
            "name": "Audit logs enabled",
            "attributes": {
                "armoBuiltin": true,
                "controlTypeTags": [
                    "security",
                    "compliance"
                ],
                "attackTracks": [
                    {
                        "attackTrack": "container",
                        "categories": [
                            "Defense evasion - KubeAPI"
                        ]
                    }
                ]
            },
            "description": "Audit logging is an important security feature in Kubernetes, it enables the operator to track requests to the cluster. It is important to use it so the operator has a record of events happened in Kubernetes",
            "remediation": "Turn on audit logging for your cluster. Look at the vendor guidelines for more details",
            "id": "C-0067",
            "long_description": "Audit logging is an important security feature in Kubernetes, it enables the operator to track requests to the cluster. It is important to use it so the operator has a record of events happened in Kubernetes",
            "test": "Reading the cluster description from the managed cloud API (EKS, GKE), or the API server pod configuration for native K8s and checking if audit logging is enabled",
            "controlID": "C-0067",
            "baseScore": 5.0,
            "rules": []
        },
        {
            "name": "Secret/ETCD encryption enabled",
            "attributes": {
                "armoBuiltin": true,
                "controlTypeTags": [
                    "security",
                    "compliance"
                ],
                "attackTracks": [
                    {
                        "attackTrack": "node",
                        "categories": [
                            "Impact"
                        ]
                    }
                ]
            },
            "description": "All Kubernetes Secrets are stored primarily in etcd therefore it is important to encrypt it.",
            "remediation": "Turn on the etcd encryption in your cluster, for more see the vendor documentation.",
            "id": "C-0066",
            "long_description": "etcd is a consistent and highly-available key value store used as Kubernetes' backing store for all cluster data. All object data in Kubernetes, like secrets, are stored there. This is the reason why it is important to protect the contents of etcd and use its data encryption feature.",
            "test": "Reading the cluster description from the managed cloud API (EKS, GKE), or the API server pod configuration for native K8s and checking if etcd encryption is enabled",
            "controlID": "C-0066",
            "baseScore": 6.0,
            "rules": []
        },
        {
            "name": "PSP enabled",
            "attributes": {
                "armoBuiltin": true,
                "controlTypeTags": [
                    "security",
                    "compliance"
                ],
                "attackTracks": [
                    {
                        "attackTrack": "kubeapi",
                        "categories": [
                            "Impact - service injection"
                        ]
                    }
                ]
            },
            "description": "PSP enable fine-grained authorization of pod creation and it is important to enable it",
            "remediation": "Turn Pod Security Policies on in your cluster, if you use other admission controllers to control the behavior that PSP controls, exclude this control from your scans",
            "id": "C-0068",
            "long_description": "Pod Security Policies enable fine-grained authorization of pod creation and updates and it extends authorization  beyond RBAC. It is an important to use PSP to control the creation of sensitive PODs in your cluster.",
            "test": "Reading the cluster description from the managed cloud API (EKS, GKE), or the API server pod configuration for native K8s and checking if PSP is enabled",
            "controlID": "C-0068",
            "baseScore": 1.0,
            "rules": []
        },
        {
            "name": "Disable anonymous access to Kubelet service",
            "attributes": {
                "armoBuiltin": true,
                "controlTypeTags": [
                    "security",
                    "compliance"
                ],
                "attackTracks": [
                    {
                        "attackTrack": "kubeapi",
                        "categories": [
                            "Initial access"
                        ]
                    }
                ]
            },
            "description": "By default, requests to the kubelet's HTTPS endpoint that are not rejected by other configured authentication methods are treated as anonymous requests, and given a username of system:anonymous and a group of system:unauthenticated.",
            "remediation": "Start the kubelet with the --anonymous-auth=false flag.",
            "id": "C-0069",
            "long_description": "By default, requests to the kubelet's HTTPS endpoint that are not rejected by other configured authentication methods are treated as anonymous requests, and given a username of system:anonymous and a group of system:unauthenticated.",
            "test": "Reading the kubelet command lines and configuration file looking for anonymous-auth configuration. If this configuration is set on both, the command line values take precedence over it.",
            "controlID": "C-0069",
            "baseScore": 10,
            "rules": []
        },
        {
            "name": "Enforce Kubelet client TLS authentication",
            "attributes": {
                "armoBuiltin": true,
                "controlTypeTags": [
                    "security",
                    "compliance"
                ],
                "attackTracks": [
                    {
                        "attackTrack": "node",
                        "categories": [
                            "Initial access"
                        ]
                    }
                ]
            },
            "description": "Kubelets are the node level orchestrator in Kubernetes control plane. They are publishing service port 10250 where they accept commands from API server. Operator must make sure that only API server is allowed to submit commands to Kubelet. This is done through client certificate verification, must configure Kubelet with client CA file to use for this purpose.",
            "remediation": "Start the kubelet with the --client-ca-file flag, providing a CA bundle to verify client certificates with.",
            "id": "C-0070",
            "long_description": "Kubelets are the node level orchestrator in Kubernetes control plane. They are publishing service port 10250 where they accept commands from API server. Operator must make sure that only API server is allowed to submit commands to Kubelet. This is done through client certificate verification, must configure Kubelet with client CA file to use for this purpose.",
            "test": "Reading the kubelet command lines and configuration file looking for client TLS configuration.",
            "controlID": "C-0070",
            "baseScore": 9.0,
            "rules": []
        }
    ],
    "ControlsIDs": [
        "C-0053",
        "C-0014",
        "C-0012",
        "C-0035",
        "C-0054",
        "C-0002",
        "C-0021",
        "C-0048",
        "C-0052",
        "C-0026",
        "C-0015",
        "C-0020",
        "C-0057",
        "C-0042",
        "C-0045",
        "C-0039",
        "C-0036",
        "C-0031",
        "C-0037",
        "C-0007",
        "C-0058",
        "C-0059",
        "C-0067",
        "C-0066",
        "C-0068",
        "C-0069",
        "C-0070"
    ]
}